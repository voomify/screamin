require 'screamin/helpers/analysis'

Voom::Presenters.define(:unique_request_card, namespace: :screamin) do
  helpers Screamin::Helpers::Analysis

  helpers do
    def request_tracking(k = key)
      @request_tracking ||= analysis_repo.request(k)
    end

    def hash_tracking_attributes(*attt)
      attt.map do |_attribute_|
        "#{_attribute_}: #{hash_tracking&.send(_attribute_)}"
      end
    end

    def request_params(collection)
      body "**#{titleize(collection)}**"
      hash = hash_tracking&.send(collection)
      body 'none' unless hash&.any?
      hash&.each do |k, qp|
        body "#{k}:[#{qp.values.join(', ')}](#{qp.relevance})" do
          event :click do
            posts command_path(:add_cache_key, key: key, status_code: status_code,
                               hash: hash_tracking.hash, collection: collection, param_key: k, app_name: app_name, env_name: env_name)
            replaces "cache_key_#{collection}", :cache_key_chips, key: context['key'], status_code: context['status_code'],
                     hash: context['hash'], app_name: app_name, env_name: env_name, collection: collection
          end unless unique_request_cached?
        end
      end
    end
  end

  attach :header
  attach :nav

  page_title "#{app_name}:#{env_name} Unique Request (#{hash}) for path: [#{key}](#{presenters_path(:analysis, app_name: app_name, env_name: env_name)})"

  grid do
    column 12 do

      card do
        grid do
          column 9 do
            card do
              title "Request(#{hash_tracking&.hits})"
              body hash_tracking_attributes(:first_at, :last_at)
              request_params(:query_params)
              request_params(:request_headers)
              request_params(:session)
              request_params(:cookies)
            end
            card do
              title 'Response'
              request_params(:response_headers)
            end
          end
          column 3 do
            body '**Cache**'
            switch name: :cache, checked: unique_request_cached? do
              event :change do
                posts command_path(:toggle_strategy, key: key, app_name: app_name, env_name: env_name), input_tag: :cache_keys
              end
            end
            content tag: :cache_keys do
              attach :cache_key_chips, collection: :query_params
              attach :cache_key_chips, collection: :request_headers
              attach :cache_key_chips, collection: :session
              attach :cache_key_chips, collection: :cookies
            end
          end
        end
      end
    end
  end
end
